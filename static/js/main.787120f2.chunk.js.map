{"version":3,"sources":["logo.svg","ToDoList.js","List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","Component","List","props","listitems","items","map","item","className","key","text","icon","onClick","deleteItem","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","e","this","setState","target","value","Date","now","preventDefault","newItem","newItems","filteredItems","filter","id","onSubmit","type","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,6JCGpBC,IAAMC,U,aCoBdC,MAjBf,SAAcC,GACV,IACMC,EADQD,EAAME,MACGC,KAAI,SAAAC,GAEnB,OAAO,yBAAKC,UAAW,OAAOC,IAAOF,EAAKE,KACtC,2BAAIF,EAAKG,KACT,8BACI,kBAAC,IAAD,CAAiBF,UAAY,UAAUG,KAAM,QAC7CC,QAAU,kBAAIT,EAAMU,WAAWN,EAAKE,cAIpD,OACG,6BAAML,I,6BCVbU,IAAQC,IAAIC,K,IAoEGC,E,YAhEb,WAAYd,GAAO,IAAD,8BAChB,4CAAMA,KACDe,MAAM,CACTb,MAAO,GACPc,YAAY,CACVT,KAAK,GAAKD,IAAK,KAGnB,EAAKW,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKR,WAAa,EAAKA,WAAWQ,KAAhB,gBAVF,E,yEAaNE,GACdC,KAAKC,SAAS,CACZN,YAAY,CACVT,KAAMa,EAAEG,OAAOC,MACflB,IAAKmB,KAAKC,W,8BAMJN,GACNA,EAAEO,iBACF,IAAMC,EAAUP,KAAKN,MAAMC,YAC3B,GAAkB,KAAfY,EAAQrB,KAAU,CACnB,IAAMsB,EAAQ,sBAAOR,KAAKN,MAAMb,OAAlB,CAAyB0B,IACvCP,KAAKC,SAAS,CACZpB,MAAM2B,EACNb,YAAa,CACXT,KAAM,GACND,IAAK,S,iCAMFA,GACT,IAAMwB,EAAgBT,KAAKN,MAAMb,MAAM6B,QAAO,SAAA3B,GAAI,OAChDA,EAAKE,MAAMA,KACXe,KAAKC,SAAS,CAACpB,MAAO4B,M,+BAI1B,OACE,yBAAKzB,UAAW,OACd,gCACA,0BAAM2B,GAAI,aAAaC,SAAUZ,KAAKF,SACpC,2BAAOe,KAAM,OAAOC,YAAc,GAClCX,MAASH,KAAKN,MAAMC,YAAYT,KAChC6B,SAAWf,KAAKJ,cAChB,4BAAQiB,KAAO,UAAf,SAGJ,kBAAC,EAAD,CAAMhC,MAASmB,KAAKN,MAAMb,MACxBQ,WAAcW,KAAKX,kB,GA1DPb,IAAMC,WCCJuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.787120f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass ToDoList extends React.Component\r\n{\r\n    componentDidUpdate(){\r\n        this.props.inputElement.current.focus()\r\n    }\r\n    render()\r\n    {\r\n        return(\r\n            <div className = \"todoListMain\">\r\n                <div className = \"header\">\r\n                    <form onSubmit ={this.props.addItem}>\r\n                        <input\r\n                         placeholder =\"\"/>\r\n                         ref ={this.props.inputElement}\r\n                         value= {this.props.currentItem.text}\r\n                         onChange ={this.props.handleInput}\r\n                         />\r\n                        <button type =\"submit\">Add Task</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ToDoList","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './List.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\n\r\n\r\nfunction List(props){\r\n    const items = props.items;\r\n    const listitems =items.map(item =>\r\n        {\r\n            return <div className =\"list\" key = {item.key}>\r\n                <p>{item.text}\r\n                <span>\r\n                    <FontAwesomeIcon className = 'faicons' icon= 'trash'\r\n                    onClick ={()=>props.deleteItem(item.key)}/>\r\n                 </span></p>\r\n            </div>        \r\n        })\r\n    return(\r\n       <div>{listitems}</div>\r\n    )\r\n}\r\n\r\nexport default List;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ToDoList from './ToDoList';\nimport List from './List';\nimport logo from './logo.svg';\nimport './App.css';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash);\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props)\n    this.state={\n      items: [],\n      currentItem:{\n        text:'' , key: ''\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n  }\n\n  handleInput(e){\nthis.setState({\n  currentItem:{\n    text: e.target.value,\n    key: Date.now()\n  }\n})\n  }\n\n\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.text!==\"\"){\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items:newItems,\n        currentItem: {\n          text: '',\n          key: ''\n        }\n      })\n    }\n  }\n\n  deleteItem(key){\n    const filteredItems = this.state.items.filter(item =>\n      item.key!==key);\n      this.setState({items: filteredItems})\n  }\nrender()\n{\n  return(\n    <div className =\"App\">\n      <header>\n      <form id= \"to-do-form\" onSubmit={this.addItem}>\n        <input type= \"text\" placeholder  =\"\"\n        value = {this.state.currentItem.text}\n        onChange ={this.handleInput}/>\n        <button type = \"submit\">Add</button>\n      </form>\n    </header>\n    <List items = {this.state.items}\n      deleteItem = {this.deleteItem}>\n    </List>\n\n    </div>\n  );\n}                   \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}